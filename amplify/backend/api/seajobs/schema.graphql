# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/auth
# input AMPLIFY {
#   globalAuthRule: AuthRule = { allow: public }
# } # FOR TESTING ONLY!
type Konsultan
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      ###owner, can do all operations
      # { allow: owner,  operations: [create, update, read] }
      {
        allow: private
        provider: userPools
        operations: [create, update, read, delete]
      }
    ]
  ) {
  konsultanId: String! @primaryKey
  konsultanName: String!
  konsultanLocation: String!
  konsultanAddress: String!
  konsultanEmail: [String!]!
  konsultanPhoneNumber: [String!]!
  konsultanRangeTotalEmployees: String!
  konsultanPIC: String!
  projectBidders: [CompanyProjectBidder]
    @hasMany(indexName: "bidByKonsultan", fields: ["konsultanId"])
  projects: [Project]
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
}

type TenagaAhli
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      ###owner, can do all operations
      # { allow: owner,  operations: [create, update, read] }
      {
        allow: private
        provider: userPools
        operations: [create, update, read, delete]
      }
    ]
  ) {
  taId: String! @primaryKey
  taFullName: String!
  taExpertise: EnumExpertise!
  taAddress: String!
  taEmail: [String!]!
  taPhoneNumber: [String!]!
  taPortfolioLink: [TenagaAhliPortfolioLink!]
  taSelfDescription: String
  taAdditionalExpertise: [EnumExpertise!]!
  pengalamanKerja: [PengalamanKerja]
    @hasMany(indexName: "byTenagaAhliByTimeline", fields: ["taId"])
  projectBidded: [CompanyProjectBidder]
    @hasMany(indexName: "bidByTa", fields: ["taId"])
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
}

type PengalamanKerja
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      ###owner, can do all operations
      # { allow: owner,  operations: [create, update, read] }
      {
        allow: private
        provider: userPools
        operations: [create, update, read, delete]
      }
    ]
  ) {
  taId: String!
    @primaryKey(
      sortKeyFields: [
        "sanitisedCompanyName"
        "contractStart"
        "sanitisedProjectName"
      ]
    )
    @index(
      name: "byTenagaAhliByTimeline"
      sortKeyFields: ["contractStart", "isFinished"]
    )
  companyName: String!
  projectName: String!
  sanitisedCompanyName: String!
  sanitisedProjectName: String!
  contractType: EnumContractType!
  contractDuration: String!
  contractStart: AWSDate!
  contractEnd: String!
  isFinished: Boolean!
  contractCity: String!
  contractCountry: String!
  contractDescription: String!
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
}

type Project
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      ###owner, can do all operations
      # { allow: owner,  operations: [create, update, read] }
      {
        allow: private
        provider: userPools
        operations: [create, update, read, delete]
      }
    ]
  ) {
  projectId: String!
    @primaryKey(sortKeyFields: ["isActive", "projectDeadline", "projectStart"])
  projectTitle: String!
  projectLocation: String!
  projectValue: String!
  projectDuration: String!
  projectStart: AWSDate!
  projectCategories: [String!]!
  projectDeadline: AWSDate!
  projectSubCategory: [EnumExpertise!]!
  bidders: [CompanyProjectBidder] @hasMany
  projectOwner: String!
    @index(name: "projectByOwner", sortKeyFields: ["projectStart", "isActive"])
  isActive: String!
  isDeleted: Boolean!
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
}

type CompanyProjectBidder
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(
    rules: [
      ###owner, can do all operations
      # { allow: owner,  operations: [create, update, read] }
      {
        allow: private
        provider: userPools
        operations: [create, update, read, delete]
      }
    ]
  ) {
  projectId: String! @primaryKey
  taId: String! @index(name: "bidByTa", sortKeyFields: ["konsultanId"])
  konsultanId: String! @index(name: "bidByKonsultan", sortKeyFields: ["taId"])
  biddingStatus: EnumBiddingStatus!
  comments: [String!]
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
}

type TenagaAhliPortfolioLink {
  websiteAddress: String!
  linkToPortfolio: String!
  portfolioName: String! #insta, linkedin, etc
}

enum EnumBiddingStatus {
  SUBMITTED
  APPROVED
  REJECTED
}

enum EnumExpertise {
  Hukum
  Keuangan_dan_Ekonomi
  Kerja_Sama
  Manajemen_Resiko
  Sosial_dan_LARAP
  Pengadaan
}

enum EnumContractType {
  Fulltime
  Parttime
  Freelance
  Others
}
